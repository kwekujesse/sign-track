/**
 * @file Firestore Security Rules for SignTrack Application
 *
 * @core_philosophy This ruleset employs a hybrid security model: associates have role-based access to orders, while associating their profiles are restricted to owner-only access.
 *
 * @data_structure
 * - /associates/{associateId}: Stores associate profile data.
 * - /orders/{orderId}: Stores order information, including a `members` map for associate roles.
 * - /signatures/{signatureId}: Stores signature data.
 *
 * @key_security_decisions
 * - Associates can only manage their profiles.
 * - Associates can only access Orders in which they are listed in the 'members' map with a defined role.
 * - Only authenticated users can access the database. Anonymous access will also work.
 * - Listing all associates or signatures is disallowed.
 *
 * @denormalization_for_authorization
 * - The `orders` document contains a `members` map which stores roles of users who have access to the order. This eliminates the need for separate membership lookups.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the specified role for the resource.
     */
    function hasRole(role) {
        return isSignedIn() && resource.data.members[request.auth.uid] == role;
    }

    /**
     * @description Checks if the user has the specified role for the request data.
     */
    function requestHasRole(role) {
        return isSignedIn() && request.resource.data.members[request.auth.uid] == role;
    }

    /**
     * @description Rules for the /associates/{associateId} collection.
     * @path /associates/{associateId}
     * @allow (create) Signed-in user with UID matching the associateId can create.
     * @allow (get) Signed-in user with UID matching the associateId can get.
     * @allow (update) Signed-in user with UID matching the associateId can update.
     * @allow (delete) Signed-in user with UID matching the associateId can delete.
     * @deny (create) Signed-in user with UID not matching the associateId cannot create.
     * @deny (get) Signed-in user with UID not matching the associateId cannot get.
     * @deny (update) Signed-in user with UID not matching the associateId cannot update.
     * @deny (delete) Signed-in user with UID not matching the associateId cannot delete.
     * @principle Enforces document ownership for writes.
     */
    match /associates/{associateId} {
      allow get: if isSignedIn() && isOwner(associateId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(associateId);
      allow update: if isExistingOwner(associateId);
      allow delete: if isExistingOwner(associateId);
    }

    /**
     * @description Rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get) Any signed-in user can get.
     * @allow (list) Any signed-in user can list.
     * @allow (create) Any signed-in user can create. Requires the members map contains at least the creator.
     * @allow (update) Only users with the role of 'editor' in the members map can update.
     * @allow (delete) Only users with the role of 'editor' in the members map can delete.
     * @deny (create) A signed-in user cannot create if the members map is invalid.
     * @deny (update) A signed-in user cannot update if they are not an editor.
     * @deny (delete) A signed-in user cannot delete if they are not an editor.
     * @principle Enforces role-based access via the 'members' map.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && hasRole('editor');
      allow delete: if isSignedIn() && hasRole('editor') && resource != null;
    }

    /**
     * @description Rules for the /signatures/{signatureId} collection.
     * @path /signatures/{signatureId}
     * @allow (get) Any signed-in user can get.
     * @deny (list) Listing signatures is not allowed.
     * @allow (create) Any signed-in user can create.
     * @allow (update) Any signed-in user can update.
     * @allow (delete) Any signed-in user can delete.
     * @principle Allows read/write to signatures.
     */
    match /signatures/{signatureId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}