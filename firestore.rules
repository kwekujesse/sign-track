/**
 * @fileoverview Firestore Security Rules for SignTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for orders and an ownership model for associates and signatures.
 *
 * Data Structure:
 * - /associates/{associateId}: Stores associate profile information, managed by admins.
 * - /orders/{orderId}: Stores order information, including a members map for associate access control.
 * - /signatures/{signatureId}: Stores signature data linked to orders.
 *
 * Key Security Decisions:
 * - Associates can only access orders they are members of, based on the 'members' map in the order document.
 * - Associates can only read/write their own associate profile.
 * - Associates are not able to list other associates.
 *
 * Denormalization for Authorization:
 * - Orders documents contain a `members` map that explicitly lists which associates have access, avoiding complex queries for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to associate profiles.
     * @path /associates/{associateId}
     * @allow (get) Associate with matching ID can read their own profile.
     * @allow (create) Associates can create their own profile.
     * @allow (update) Associate with matching ID can update their own profile.
     * @allow (delete) Associate with matching ID can delete their own profile.
     * @deny (get) Associate trying to read another associate's profile.
     * @deny (create) Associate trying to create profile with ID that does not match their own id.
     * @deny (update) Associate trying to update another associate's profile.
     * @deny (delete) Associate trying to delete another associate's profile.
     * @principle Enforces document ownership for associate profiles.
     */
    match /associates/{associateId} {
      // Helpers
      function isAssociate() {
        return request.auth != null;
      }

      function isOwner(associateId) {
        return request.auth.uid == associateId;
      }

      function isExistingOwner(associateId) {
        return isOwner(associateId) && resource != null;
      }

      // Permissions

      allow get: if isOwner(associateId);
      allow list: if false;

      allow create: if isAssociate() && request.auth.uid == associateId;

      allow update: if isExistingOwner(associateId);

      allow delete: if isExistingOwner(associateId);
    }

    /**
     * @description Controls access to order documents.
     * @path /orders/{orderId}
     * @allow (get) Associate who is a member of the order can read the order.
     * @allow (create) Associate can create an order and is added to the members map.
     * @allow (update) Associate who is a member of the order can update the order.
     * @allow (delete) Associate who is a member of the order can delete the order.
     * @deny (get) Associate trying to read an order they are not a member of.
     * @deny (create) Associate trying to create an order without adding themselves to the members map.
     * @deny (update) Associate trying to update an order they are not a member of.
     * @deny (delete) Associate trying to delete an order they are not a member of.
     * @principle Enforces role-based access control for orders based on the 'members' map.
     */
    match /orders/{orderId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember() {
        return isSignedIn() && resource.data.members[request.auth.uid] == true;
      }

      function isNewOrderOwner() {
        return isSignedIn() && request.resource.data.members[request.auth.uid] == true;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.members[request.auth.uid] == true && resource != null;
      }

      // Permissions

      allow get: if isMember();
      allow list: if isSignedIn();

      allow create: if isNewOrderOwner();

      allow update: if isExistingOwner();

      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to signature documents.
     * @path /signatures/{signatureId}
     * @allow (get) Anyone can read a signature.
     * @allow (create) Associate can create a signature.
     * @allow (update) Associate who created the signature can update it.
     * @allow (delete) Associate who created the signature can delete it.
     * @deny (create) Unauthorized user cannot create a signature.
     * @deny (update) Unauthorized user cannot update a signature.
     * @deny (delete) Unauthorized user cannot delete a signature.
     * @principle Enforces document ownership for signatures.
     */
    match /signatures/{signatureId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn();

      allow update: if request.auth.uid == resource.data.creatorId;

      allow delete: if request.auth.uid == resource.data.creatorId;
    }
  }
}